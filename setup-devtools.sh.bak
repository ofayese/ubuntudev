#!/usr/bin/env bash
# setup-devtools.sh - Dev tools setup using util-install
# Version: 1.0.0
# Last updated: 2025-06-13
set -euo pipefail

# shellcheck disable=SC2034  # VERSION used in logging/reporting
if [[ -z "${VERSION:-}" ]]; then
  VERSION="1.0.0"
  readonly VERSION
fi

# Script directory (only declare once globally)
if [[ -z "${SCRIPT_DIR:-}" ]]; then
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  readonly SCRIPT_DIR
fi

# Dry-run mode support (only declare once globally)
if [[ -z "${DRY_RUN:-}" ]]; then
  DRY_RUN="${DRY_RUN:-false}"
  readonly DRY_RUN
fi

# Operating system detection for cross-platform compatibility (only declare once globally)
if [[ -z "${OS_TYPE:-}" ]]; then
  OS_TYPE="$(uname -s)"
  readonly OS_TYPE
fi

# Maximum timeout for each installation step (in seconds)
readonly MAX_STEP_TIMEOUT=300 # 5 minutes

# Source utility modules with error checking
source "$SCRIPT_DIR/util-log.sh" || {
  echo "FATAL: Failed to source util-log.sh" >&2
  exit 1
}
source "$SCRIPT_DIR/util-env.sh" || {
  echo "FATAL: Failed to source util-env.sh" >&2
  exit 1
}
source "$SCRIPT_DIR/util-install.sh" || {
  echo "FATAL: Failed to source util-install.sh" >&2
  exit 1
}

# Use more accessible log path
readonly LOGFILE="${HOME}/.cache/ubuntu-dev-tools.log}"
mkdir -p "$(dirname "$LOGFILE")"
init_logging "$LOGFILE"

# Set up error handling - disable automatic exit on error and handle manually
set +e # Don't exit on errors, handle them manually

# Define installation steps for progress tracking
declare -a INSTALL_STEPS=(
  "update_package_index"
  "system_monitoring"
  "cli_utilities"
  "eza_from_github"
  "zsh_setup"
)

current_step=0
total_steps=${#INSTALL_STEPS[@]}

# Step 1: Update package index
((current_step++))
log_step_start "Updating package index" "$current_step" "$total_steps"

# Update with error handling
if run_with_timeout "sudo apt-get update -y" "Updating package index" 120; then
  log_substep "Package index updated" "SUCCESS"
else
  log_substep "Package index update had some issues" "WARNING" "Continuing anyway..."
fi

log_step_complete "Updating package index" "$current_step" "$total_steps"

# Step 2: Install system monitoring tools
((current_step++))
log_step_start "Installing system monitoring tools" "$current_step" "$total_steps"

# Install packages individually with error tolerance
monitoring_packages=(htop btop glances ncdu iftop)
failed_monitoring=()

for pkg in "${monitoring_packages[@]}"; do
  log_substep "Installing $pkg" "IN PROGRESS"
  if run_with_timeout "sudo DEBIAN_FRONTEND=noninteractive apt-get install -y $pkg" "Installing $pkg" 120; then
    log_substep "Installing $pkg" "SUCCESS"
  else
    log_substep "Installing $pkg" "WARNING" "May not be available in this version"
    failed_monitoring+=("$pkg")
  fi
done

if [ ${#failed_monitoring[@]} -gt 0 ]; then
  log_substep "Some packages failed to install" "WARNING" "${failed_monitoring[*]}"
  log_substep "Basic monitoring tools should still be available" "INFO"
fi

log_step_complete "Installing system monitoring tools" "$current_step" "$total_steps"

# Step 3: Install CLI utilities
((current_step++))
log_step_start "Installing CLI utilities" "$current_step" "$total_steps"

# Install packages individually with error tolerance
cli_packages=(bat fzf ripgrep git wget curl)
failed_cli=()

for pkg in "${cli_packages[@]}"; do
  log_substep "Installing $pkg" "IN PROGRESS"
  if run_with_timeout "sudo DEBIAN_FRONTEND=noninteractive apt-get install -y $pkg" "Installing $pkg" 120; then
    log_substep "Installing $pkg" "SUCCESS"
  else
    log_substep "Installing $pkg" "WARNING" "May not be available in this version"
    failed_cli+=("$pkg")
  fi
done

if [ ${#failed_cli[@]} -gt 0 ]; then
  log_substep "Some CLI utilities failed to install" "WARNING" "${failed_cli[*]}"
  log_substep "Trying alternative packages" "IN PROGRESS"

  # Try alternative package names
  for pkg in "${failed_cli[@]}"; do
    case "$pkg" in
    "bat")
      log_substep "Trying batcat (alternative to bat)" "IN PROGRESS"
      if run_with_timeout "sudo DEBIAN_FRONTEND=noninteractive apt-get install -y batcat" "Installing batcat" 120; then
        log_substep "Installed batcat" "SUCCESS"
        echo 'alias bat=batcat' >>"$HOME/.bashrc"
        log_substep "Added alias: bat=batcat" "SUCCESS"
      else
        log_substep "Failed to install batcat" "FAILED"
      fi
      ;;
    "ripgrep")
      log_substep "Trying rg (alternative to ripgrep)" "IN PROGRESS"
      if run_with_timeout "sudo DEBIAN_FRONTEND=noninteractive apt-get install -y rg" "Installing rg" 120; then
        log_substep "Installed rg (ripgrep alternative)" "SUCCESS"
      else
        log_substep "Failed to install rg" "FAILED"
      fi
      ;;
    esac
  done
fi

log_step_complete "Installing CLI utilities" "$current_step" "$total_steps"

# Step 4: Install eza from GitHub
((current_step++))
log_step_start "Installing eza from GitHub" "$current_step" "$total_steps"

# Check if eza is already installed
if command -v eza &>/dev/null; then
  log_substep "eza is already installed" "SUCCESS" "Skipping installation"
else
  log_substep "Attempting to install eza" "IN PROGRESS"

  # First try installing from apt (available in newer Ubuntu/Debian)
  if run_with_timeout "sudo DEBIAN_FRONTEND=noninteractive apt-get install -y eza" "Installing eza via apt" 120; then
    log_substep "Installed eza via apt" "SUCCESS"
  else
    log_substep "eza not available via apt" "WARNING" "Trying binary download instead"

    # Try downloading the binary version from GitHub
    temp_dir="/tmp/eza_install_$$"
    log_substep "Creating temporary directory" "IN PROGRESS"
    mkdir -p "$temp_dir"

    log_substep "Downloading eza from GitHub" "IN PROGRESS"
    if run_with_timeout "wget -q -O \"$temp_dir/eza.tar.gz\" \"https://github.com/eza-community/eza/releases/latest/download/eza_x86_64-unknown-linux-gnu.tar.gz\"" "Downloading eza" 120; then
      log_substep "Downloaded eza binary" "SUCCESS"

      log_substep "Installing eza binary" "IN PROGRESS"
      if run_with_timeout "cd \"$temp_dir\" && tar -xzf eza.tar.gz && sudo install -m 755 eza /usr/local/bin/eza" "Extracting and installing eza" 60; then
        log_substep "Installed eza from binary" "SUCCESS"
        rm -rf "$temp_dir"
      else
        log_substep "Failed to install eza binary" "FAILED"
        rm -rf "$temp_dir"
      fi
    else
      log_substep "Failed to download eza" "WARNING" "Creating alias to ls instead"
      # Ensure .bashrc exists and add the alias
      touch "$HOME/.bashrc"
      if ! grep -q 'alias eza=' "$HOME/.bashrc"; then
        echo 'alias eza="ls --color=auto"' >>"$HOME/.bashrc"
        log_substep "Created eza alias to ls --color=auto" "SUCCESS" "Added to .bashrc"
      else
        log_substep "eza alias already exists" "SUCCESS"
      fi
    fi
  fi
fi

log_step_complete "Installing eza from GitHub" "$current_step" "$total_steps"

# Step 5: Install Zsh & Oh-My-Zsh
((current_step++))
log_step_start "Installing Zsh & Oh-My-Zsh" "$current_step" "$total_steps"

# Install Zsh with error handling
log_substep "Installing Zsh" "IN PROGRESS"
if run_with_timeout "sudo DEBIAN_FRONTEND=noninteractive apt-get install -y zsh" "Installing Zsh" 120; then
  log_substep "Installed Zsh" "SUCCESS"

  # Install Oh-My-Zsh if not already present
  if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    log_substep "Installing Oh-My-Zsh" "IN PROGRESS"
    # Note the strict timeout to prevent hanging
    if run_with_timeout "sh -c \"RUNZSH=no CHSH=no KEEP_ZSHRC=yes \$(wget --timeout=30 -qO- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"" "Installing Oh-My-Zsh" 60; then
      log_substep "Oh-My-Zsh installed" "SUCCESS"
    else
      log_substep "Failed to install Oh-My-Zsh" "WARNING" "Zsh is still available"
    fi
  else
    log_substep "Oh-My-Zsh is already installed" "SUCCESS"
  fi
else
  log_substep "Failed to install Zsh" "FAILED"
fi

log_step_complete "Installing Zsh & Oh-My-Zsh" "$current_step" "$total_steps"

# Show completion summary with detailed statistics
show_completion_summary "DevTools Setup" "$(date +%s)" "SUCCESS" "Installed critical development tools and utilities"

# Verify critical tools are available and report final status
log_substep "Verifying critical tools" "IN PROGRESS"
critical_missing=()
command -v wget >/dev/null || critical_missing+=("wget")
command -v curl >/dev/null || critical_missing+=("curl")
command -v git >/dev/null || critical_missing+=("git")

if [ ${#critical_missing[@]} -gt 0 ]; then
  log_substep "Critical tools missing" "FAILED" "${critical_missing[*]}"
  log_error "DevTools setup failed - essential tools not available"
  finish_logging
  exit 1
else
  log_substep "All critical tools verified" "SUCCESS" "wget, curl, git are available"
fi

# Report optional package issues
total_failed=$((${#failed_monitoring[@]} + ${#failed_cli[@]}))
if [ $total_failed -gt 0 ]; then
  log_substep "Some optional packages failed" "WARNING" "$total_failed packages couldn't be installed"
  log_substep "Core functionality not affected" "INFO" "You can manually install these later"
fi

finish_logging
exit 0
