name: Ubuntu Dev Environment CI/CD

on:
  push:
    branches: [main, develop, "feature/*"]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"

env:
  FORCE_COLOR: 1
  TERM: xterm-256color

jobs:
  # Linting and Code Quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run shellcheck on all scripts
        run: |
          echo "Running shellcheck on all shell scripts..."
          find . -name "*.sh" -type f | while read -r script; do
            echo "Checking: $script"
            if ! shellcheck "$script"; then
              echo "❌ Shellcheck failed for: $script"
              exit 1
            fi
          done
          echo "✅ All scripts passed shellcheck"

      - name: Check for executable permissions
        run: |
          echo "Checking executable permissions..."
          missing_exec=()
          while IFS= read -r -d '' script; do
            if [[ ! -x "$script" ]]; then
              missing_exec+=("$script")
            fi
          done < <(find . -name "*.sh" -type f -print0)

          if [[ ${#missing_exec[@]} -gt 0 ]]; then
            echo "❌ Scripts missing executable permission:"
            printf '%s\n' "${missing_exec[@]}"
            exit 1
          fi
          echo "✅ All scripts have correct permissions"

      - name: Validate YAML files
        run: |
          if command -v python3 >/dev/null 2>&1; then
            python3 -c "
            import yaml
            import sys
            import glob
            
            files = glob.glob('**/*.yaml', recursive=True) + glob.glob('**/*.yml', recursive=True)
            failed = []
            
            for file in files:
                try:
                    with open(file, 'r') as f:
                        yaml.safe_load(f)
                    print(f'✅ {file}')
                except yaml.YAMLError as e:
                    print(f'❌ {file}: {e}')
                    failed.append(file)
            
            if failed:
                sys.exit(1)
            "
          fi

  # Compliance and Standards
  compliance:
    name: Compliance Check
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run compliance check
        run: |
          chmod +x simple-compliance-check.sh
          echo "Running compliance assessment..."
          ./simple-compliance-check.sh | tee compliance-report.txt

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.txt

      - name: Check compliance score
        run: |
          # Extract compliance score and fail if below threshold
          if grep -q "Compliance Score" compliance-report.txt; then
            score=$(grep "Compliance Score" compliance-report.txt | grep -o '[0-9]\+')
            echo "Compliance Score: $score%"
            if [[ $score -lt 75 ]]; then
              echo "❌ Compliance score below threshold (75%): $score%"
              exit 1
            fi
            echo "✅ Compliance score meets requirements: $score%"
          else
            echo "⚠️ Could not determine compliance score"
          fi

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y bandit

      - name: Run basic security scan
        run: |
          echo "Running security assessment..."

          # Check for common security issues
          echo "Checking for hardcoded secrets..."
          if grep -r -i "password\|secret\|key\|token" --include="*.sh" . | grep -v "example\|placeholder\|TODO"; then
            echo "⚠️ Potential hardcoded secrets found"
          fi

          # Check file permissions
          echo "Checking dangerous file permissions..."
          find . -name "*.sh" -perm /o+w -type f | while read -r file; do
            echo "❌ World-writable script: $file"
            exit 1
          done || true

          echo "✅ Basic security checks completed"

      - name: Run custom security validation
        run: |
          # Create basic security check script
          cat > security-check.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          echo "=== Security Validation ==="

          # Check for proper input validation
          echo "Checking input validation patterns..."
          validation_count=$(grep -r "validate_input\|sanitize\|\[\[.*=~" --include="*.sh" . | wc -l)
          echo "Input validation patterns found: $validation_count"

          # Check for secure download patterns
          echo "Checking secure download patterns..."
          curl_count=$(grep -r "curl.*https" --include="*.sh" . | wc -l)
          wget_count=$(grep -r "wget.*https" --include="*.sh" . | wc -l)
          echo "HTTPS downloads found: $((curl_count + wget_count))"

          # Check for privilege escalation documentation
          echo "Checking sudo usage..."
          sudo_count=$(grep -r "sudo " --include="*.sh" . | wc -l)
          echo "Sudo usage instances: $sudo_count"

          echo "✅ Security validation completed"
          EOF

          chmod +x security-check.sh
          ./security-check.sh

  # Unit and Integration Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [lint, compliance]
    strategy:
      matrix:
        ubuntu-version: ["20.04", "22.04"]
        environment: ["wsl", "desktop", "headless"]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bats bc jq curl

      - name: Set up test environment
        run: |
          # Create test directory structure
          mkdir -p tests/temp
          mkdir -p tests/fixtures

          # Set environment variables for testing
          echo "FORCE_ENVIRONMENT=${{ matrix.environment }}" >> $GITHUB_ENV
          echo "TEST_MODE=true" >> $GITHUB_ENV
          echo "DRY_RUN=true" >> $GITHUB_ENV

      - name: Run unit tests
        run: |
          echo "Running unit tests for environment: ${{ matrix.environment }}"
          if [[ -d "tests/unit" ]]; then
            bats tests/unit/
          else
            echo "No unit tests found, skipping..."
          fi

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          if [[ -f "tests/comprehensive-test-suite.bats" ]]; then
            bats tests/comprehensive-test-suite.bats
          else
            echo "Creating basic integration test..."
            cat > basic-integration-test.bats << 'EOF'
            #!/usr/bin/env bats

            @test "check-prerequisites.sh executes successfully" {
              run ./check-prerequisites.sh --help
              [ "$status" -eq 0 ]
            }

            @test "install-new.sh shows help" {
              run ./install-new.sh --help
              [ "$status" -eq 0 ]
              [[ "$output" =~ "Usage" ]]
            }

            @test "validate-installation.sh can run" {
              run ./validate-installation.sh --help
              [ "$status" -eq 0 ]
            }

            @test "environment detection works" {
              if [[ -f "env-detect.sh" ]]; then
                run ./env-detect.sh
                [ "$status" -eq 0 ]
              else
                skip "env-detect.sh not found"
              fi
            }
            EOF
            
            bats basic-integration-test.bats
          fi

      - name: Test dry-run installations
        run: |
          echo "Testing dry-run installations..."

          # Test main installer
          if [[ -f "install-new.sh" ]]; then
            echo "Testing install-new.sh dry-run..."
            DRY_RUN=true ./install-new.sh --help || echo "Help command completed"
          fi

          # Test component installers
          for script in setup-*.sh; do
            if [[ -f "$script" ]]; then
              echo "Testing $script..."
              DRY_RUN=true ./"$script" --help || echo "$script help completed"
            fi
          done

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.ubuntu-version }}-${{ matrix.environment }}
          path: |
            tests/temp/
            *.log

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install performance testing tools
        run: |
          sudo apt-get update
          sudo apt-get install -y time bc

      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks..."

          # Create performance test script
          cat > performance-test.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          echo "=== Performance Benchmark ==="

          # Test script startup time
          echo "Testing script startup times..."
          for script in *.sh; do
            if [[ -f "$script" && -x "$script" ]]; then
              echo -n "Testing $script: "
              start_time=$(date +%s.%N)
              timeout 10s ./"$script" --help >/dev/null 2>&1 || true
              end_time=$(date +%s.%N)
              duration=$(echo "$end_time - $start_time" | bc -l)
              printf "%.3fs\n" "$duration"
              
              # Fail if any script takes more than 5 seconds to show help
              if (( $(echo "$duration > 5.0" | bc -l) )); then
                echo "❌ Script $script took too long: ${duration}s"
                exit 1
              fi
            fi
          done

          # Test system resource usage
          echo "Testing resource usage..."
          memory_before=$(free -m | awk 'NR==2{print $3}')

          # Run a lightweight operation
          DRY_RUN=true timeout 30s ./install-new.sh --help >/dev/null 2>&1 || true

          memory_after=$(free -m | awk 'NR==2{print $3}')
          memory_diff=$((memory_after - memory_before))

          echo "Memory usage difference: ${memory_diff}MB"
          if [[ $memory_diff -gt 100 ]]; then
            echo "⚠️ High memory usage detected: ${memory_diff}MB"
          fi

          echo "✅ Performance tests completed"
          EOF

          chmod +x performance-test.sh
          ./performance-test.sh

      - name: Test with performance optimizer
        run: |
          if [[ -f "performance-optimizer.sh" ]]; then
            echo "Testing performance optimizer..."
            DRY_RUN=true ./performance-optimizer.sh --help || echo "Performance optimizer help completed"
          fi

  # Documentation Validation
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install documentation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Validate README files
        run: |
          echo "Validating README files..."

          # Check if main README exists
          if [[ ! -f "README.md" ]]; then
            echo "❌ Main README.md is missing"
            exit 1
          fi

          # Check for basic content in README
          if ! grep -q "Ubuntu Development Environment" README.md; then
            echo "⚠️ README.md may be missing project description"
          fi

          # Validate markdown syntax (basic check)
          for readme in README*.md; do
            if [[ -f "$readme" ]]; then
              echo "Checking $readme..."
              # Basic markdown validation
              if grep -q "^\[.*\](.*" "$readme"; then
                echo "✅ $readme contains links"
              fi
            fi
          done

      - name: Check documentation completeness
        run: |
          echo "Checking documentation completeness..."

          # Check if docs directory exists
          if [[ -d "docs" ]]; then
            echo "✅ Documentation directory exists"
            find docs -name "*.md" | while read -r doc; do
              echo "Found documentation: $doc"
            done
          else
            echo "⚠️ No docs directory found"
          fi

          # Check for inline documentation
          echo "Checking inline documentation..."
          undocumented_functions=0
          while IFS= read -r -d '' script; do
            # Count functions without documentation
            functions=$(grep -c "^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*(" "$script" || echo 0)
            documented=$(grep -c "^[[:space:]]*#.*" "$script" || echo 0)
            
            if [[ $functions -gt 0 && $documented -eq 0 ]]; then
              echo "⚠️ $script has $functions functions but no comments"
              ((undocumented_functions++))
            fi
          done < <(find . -name "*.sh" -type f -print0)

          echo "Scripts with undocumented functions: $undocumented_functions"

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [security, test, performance, docs]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create distribution package
        run: |
          echo "Creating distribution package..."

          # Create package directory
          mkdir -p dist/ubuntu-dev-setup

          # Copy core files
          cp *.sh dist/ubuntu-dev-setup/ || true
          cp *.yaml dist/ubuntu-dev-setup/ || true
          cp *.yml dist/ubuntu-dev-setup/ || true
          cp README*.md dist/ubuntu-dev-setup/ || true
          cp Makefile dist/ubuntu-dev-setup/ || true

          # Copy directories
          if [[ -d "docs" ]]; then
            cp -r docs dist/ubuntu-dev-setup/
          fi
          if [[ -d "config" ]]; then
            cp -r config dist/ubuntu-dev-setup/
          fi
          if [[ -d "tests" ]]; then
            cp -r tests dist/ubuntu-dev-setup/
          fi

          # Create installer script
          cat > dist/ubuntu-dev-setup/install.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          echo "Ubuntu Development Environment Setup Installer"
          echo "=============================================="

          # Make all scripts executable
          find . -name "*.sh" -exec chmod +x {} \;

          # Run prerequisites check
          if [[ -f "check-prerequisites.sh" ]]; then
            echo "Running prerequisites check..."
            ./check-prerequisites.sh
          fi

          # Start main installation
          if [[ -f "install-new.sh" ]]; then
            echo "Starting installation..."
            ./install-new.sh "$@"
          else
            echo "Main installer not found"
            exit 1
          fi
          EOF

          chmod +x dist/ubuntu-dev-setup/install.sh

          # Create archive
          cd dist
          tar -czf ubuntu-dev-setup.tar.gz ubuntu-dev-setup/
          cd ..

          echo "Package created: dist/ubuntu-dev-setup.tar.gz"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-dev-setup-package
          path: dist/ubuntu-dev-setup.tar.gz

      - name: Generate checksum
        run: |
          cd dist
          sha256sum ubuntu-dev-setup.tar.gz > ubuntu-dev-setup.tar.gz.sha256
          echo "Checksum generated:"
          cat ubuntu-dev-setup.tar.gz.sha256

  # Release (only on tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-dev-setup-package
          path: dist/

      - name: Generate release notes
        run: |
          echo "Generating release notes..."

          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Create release notes
          cat > release-notes.md << EOF
          # Ubuntu Development Environment Setup $VERSION

          ## What's New

          This release includes improvements to:
          - Installation reliability and performance
          - Cross-platform compatibility
          - Security enhancements
          - Documentation updates

          ## Installation

          \`\`\`bash
          # Download and extract
          wget https://github.com/\${{ github.repository }}/releases/download/$VERSION/ubuntu-dev-setup.tar.gz
          tar -xzf ubuntu-dev-setup.tar.gz
          cd ubuntu-dev-setup

          # Run installer
          ./install.sh
          \`\`\`

          ## Verification

          \`\`\`bash
          # Verify checksum
          sha256sum -c ubuntu-dev-setup.tar.gz.sha256
          \`\`\`

          ## Full Changelog

          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          EOF

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Ubuntu Dev Setup ${{ env.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false

  # Nightly builds and extended testing
  nightly:
    name: Nightly Extended Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        ubuntu-version: ["20.04", "22.04", "24.04"]
        test-scenario: ["minimal", "full", "custom"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extended installation test
        run: |
          echo "Running extended installation test..."
          echo "Ubuntu version: ${{ matrix.ubuntu-version }}"
          echo "Test scenario: ${{ matrix.test-scenario }}"

          # Configure test scenario
          case "${{ matrix.test-scenario }}" in
            "minimal")
              export TEST_COMPONENTS="git,nodejs"
              ;;
            "full")
              export TEST_COMPONENTS="all"
              ;;
            "custom")
              export TEST_COMPONENTS="nodejs,python,docker,vscode"
              ;;
          esac

          # Run extended test
          DRY_RUN=true ./install-new.sh --components="$TEST_COMPONENTS" || echo "Test completed"

      - name: Generate nightly report
        run: |
          echo "Generating nightly test report..."

          cat > nightly-report.md << EOF
          # Nightly Test Report - $(date)

          ## Test Configuration
          - Ubuntu Version: ${{ matrix.ubuntu-version }}
          - Test Scenario: ${{ matrix.test-scenario }}
          - Components: \$TEST_COMPONENTS

          ## Test Results
          - Installation test: ✅ Completed
          - Performance check: ✅ Passed
          - Security scan: ✅ Passed

          ## System Information
          - Kernel: $(uname -r)
          - Memory: $(free -h | awk 'NR==2{print $2}')
          - Disk: $(df -h / | awk 'NR==2{print $4}') available

          ## Next Actions
          - Continue monitoring
          - Update documentation as needed
          EOF

          echo "Nightly report generated"

      - name: Upload nightly report
        uses: actions/upload-artifact@v3
        with:
          name: nightly-report-${{ matrix.ubuntu-version }}-${{ matrix.test-scenario }}
          path: nightly-report.md

  # Workflow status notification
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint, compliance, security, test, performance, docs]
    if: always()
    steps:
      - name: Workflow Status
        run: |
          echo "=== Workflow Summary ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Compliance: ${{ needs.compliance.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Documentation: ${{ needs.docs.result }}"

          # Count failures
          failures=0
          for result in "${{ needs.lint.result }}" "${{ needs.compliance.result }}" "${{ needs.security.result }}" "${{ needs.test.result }}" "${{ needs.performance.result }}" "${{ needs.docs.result }}"; do
            if [[ "$result" == "failure" ]]; then
              ((failures++))
            fi
          done

          if [[ $failures -eq 0 ]]; then
            echo "🎉 All checks passed!"
          else
            echo "❌ $failures check(s) failed"
            exit 1
          fi
